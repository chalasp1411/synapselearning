{
	"name": "CustomFunctions",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool001",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "81ee7e42-bc40-4131-984a-aef41049afdf"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8d6c58d4-83f0-4a29-aef2-63cfaf0f5d82/resourceGroups/ResourcegroupforDatafactory/providers/Microsoft.Synapse/workspaces/sakisri/bigDataPools/Sparkpool001",
				"name": "Sparkpool001",
				"type": "Spark",
				"endpoint": "https://sakisri.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool001",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyodbc\r\n",
					"import uuid\r\n",
					"import datetime"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SQLContext\r\n",
					"sqlContext = SQLContext(sc)\r\n",
					"sqlContext \r\n",
					"\r\n",
					"from multiprocessing.pool import ThreadPool"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"def removeHDFSFileOutputCommitterFiles (full_outputpath, extension):\r\n",
					"  files = mssparkutils.fs.ls(full_outputpath)\r\n",
					"  files_to_rm = [f.path for f in files if f.path[-3:] != extension]\r\n",
					"  for file in files_to_rm:\r\n",
					"    mssparkutils.fs.rm(file)\r\n",
					"\r\n",
					"    "
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def renameHDFSPartFile(full_outputpath, fileName, newFileName):\r\n",
					"  file_to_rename = full_outputpath + \"/\" + fileName\r\n",
					"  new_file_name = full_outputpath + \"/\" + newFileName\r\n",
					"  mssparkutils.fs.mv(file_to_rename, new_file_name)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def run_with_retry(notebook, timeout, max_retries = 3):\r\n",
					"  num_retries = 0\r\n",
					"  while True:\r\n",
					"    try:\r\n",
					"      return mssparkutils.notebook.run(notebook, timeout)\r\n",
					"    except Exception as e:\r\n",
					"      if num_retries > max_retries:\r\n",
					"        raise e\r\n",
					"      else:\r\n",
					"        print (\"Retrying error\", e)\r\n",
					"        num_retries += 1"
				],
				"execution_count": 20
			}
		]
	}
}