{
	"name": "DimAddress",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Sparkpool001",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a2395d1d-1c42-4bba-9fd9-0f47aa30992a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8d6c58d4-83f0-4a29-aef2-63cfaf0f5d82/resourceGroups/ResourcegroupforDatafactory/providers/Microsoft.Synapse/workspaces/sakisri/bigDataPools/Sparkpool001",
				"name": "Sparkpool001",
				"type": "Spark",
				"endpoint": "https://sakisri.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Sparkpool001",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /CustomFunctions"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from notebookutils import mssparkutils  \r\n",
					"\r\n",
					"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(\"kvforrealtimeadf\") \r\n",
					"spark.conf.set('fs.azure.sas.commondata.realtimeforadf.blob.core.windows.net', blob_sas_token)\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from azure.storage.blob import BlobServiceClient\r\n",
					"from azure.core.exceptions import ResourceExistsError\r\n",
					"\r\n",
					"blob_storage = \"wasbs://commondata@realtimeforadf.blob.core.windows.net\"\r\n",
					"file_path = \"/Staging/Address/Address.csv\"\r\n",
					"outputfilename = 'Dimaddress'\r\n",
					"full_path = blob_storage+file_path\r\n",
					"outputfile_path = \"/Transformdata/dimaddress\"\r\n",
					"full_outputpath = blob_storage+outputfile_path\r\n",
					" \r\n",
					"df = spark.read.load(full_path,format=\"csv\",header=True)\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Turboscope Site data\r\n",
					"df.registerTempTable('df_temp')\r\n",
					"\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_transformed_data = sqlContext.sql(\"\"\"\r\n",
					"select Addressid,case when AddressLine2 is null then AddressLine1\r\n",
					"else concat(AddressLine1,AddressLine2) end as Address,city,stateProvince,countryRegion,postalcode from df_temp\r\n",
					"\"\"\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_transformed_data.coalesce(1).write.mode(\"overwrite\").option(\"header\",\"true\").format(\"csv\").save(full_outputpath)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"removeHDFSFileOutputCommitterFiles(full_outputpath, \"csv\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"files = mssparkutils.fs.ls(full_outputpath)\r\n",
					"csv_file = [f for f in files if f.path[-3:] == \"csv\"]\r\n",
					"fileName = csv_file[0].path.split(\"/\")[-1]\r\n",
					"newFileName = outputfilename + \".csv\"\r\n",
					"renameHDFSPartFile(full_outputpath, fileName, newFileName)"
				],
				"execution_count": 8
			}
		]
	}
}